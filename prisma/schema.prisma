
generator client {
  provider        = "prisma-client"
  output          = "../app/generated/prisma"
  previewFeatures = ["driverAdapters", "queryCompiler"]
  runtime         = "bun"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkflowStatus {
  RUNNING
  SUCCESS
  FAILED
}

enum ScheduleStatus {
  ACTIVE
  PAUSED
  ERROR
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  Workflows     Workflow[]
  emailVerified Boolean    @default(false)
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Workflow {
  id         String              @id @default(uuid())
  name       String 
  userId     String
  workflow   Json 
  user       User                @relation(fields: [userId], references: [id])
  Schedules  WorkflowSchedule[]
  Executions WorkflowExecution[]

  @@index([userId])
}

model Agent {
  id        String @id @default(uuid())
  name      String
  type      String
  functions Json
  metadata  Json?
}

model WorkflowSchedule {
  id             String         @id @default(uuid())
  workflowId     String
  cronExpression String
  timezone       String
  status         ScheduleStatus
  nextRunAt      DateTime
  lastRunAt      DateTime?
  workflow       Workflow       @relation(fields: [workflowId], references: [id])

  @@index([workflowId])
  @@index([nextRunAt])
}

model WorkflowExecution {
  id         String         @id @default(uuid())
  workflowId String
  startedAt  DateTime       @default(now())
  endedAt    DateTime?
  status     WorkflowStatus
  output     Json
  workflow   Workflow       @relation(fields: [workflowId], references: [id])

  @@index([workflowId])
  @@index([startedAt])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
